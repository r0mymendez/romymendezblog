<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Romina Mendez</title>
    <link>https://r0mymendez.github.io/</link>
    <atom:link href="https://r0mymendez.github.io/blog.xml" rel="self" type="application/rss+xml"/>
    <description>Romina Mendez's personal blog/ site. Some  posts
on software, agile methodologies , data science and the professor life.
</description>
    <image>
      <title>Romina Mendez</title>
      <url>https://r0mymendez.github.io/image/favicon.ico</url>
      <link>https://r0mymendez.github.io/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 11 Nov 2023 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Data Quality</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2023-11-12-data-quality</link>
      <description>


&lt;h1 id="introducci√≥n"&gt;Introducci√≥n&lt;/h1&gt;
&lt;p&gt;En el entorno digital actual, la cantidad de datos disponibles es abrumadora. Sin embargo, la verdadera piedra angular para tomar decisiones informadas reside en la calidad de estos datos. En este art√≠culo, exploraremos la importancia crucial de la calidad de datos, analizando los desaf√≠os inherentes que enfrentan las organizaciones en la gesti√≥n de la informaci√≥n. Aunque a menudo pasada por alto, la calidad de datos desempe√±a un papel fundamental en la confiabilidad y utilidad de la informaci√≥n que sustenta nuestras decisiones estrat√©gicas.&lt;/p&gt;
&lt;h1 id="que-es-data-quality"&gt;Que es &lt;code&gt;Data quality&lt;/code&gt;?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Data quality&lt;/code&gt;&lt;/strong&gt; √≥ &lt;strong&gt;&lt;code&gt;calidad de los datos&lt;/code&gt;&lt;/strong&gt; mide qu√© tan bien un conjunto de datos cumple con los criterios de &lt;strong&gt;accuracy&lt;/strong&gt;, &lt;strong&gt;completeness&lt;/strong&gt;, &lt;strong&gt;validity&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;uniqueness&lt;/strong&gt;, &lt;strong&gt;timeliness&lt;/strong&gt; y &lt;strong&gt;fitness&lt;/strong&gt; para el prop√≥sito, y es fundamental para todas las iniciativas de gobernanza de datos dentro de una organizaci√≥n. Los est√°ndares de calidad de los datos garantizan que las empresas tomen decisiones basadas en datos para alcanzar sus objetivos comerciales.&lt;/p&gt;
&lt;p&gt;source: &lt;a href="https://www.ibm.com/topics/data-quality"&gt;IBM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://images.datacamp.com/image/upload/v1678809340/Data_Quality_Dimensions_33eb1d29b9.png" /&gt;&lt;/p&gt;
&lt;p&gt;source: &lt;a href="https://www.datacamp.com/cheat-sheet/data-quality-dimensions-cheat-sheet"&gt;DataCamp cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="data-quality-dimensions"&gt;Data quality dimensions&lt;/h1&gt;
&lt;p&gt;En la siguiente tabla destaca los distintos dominios de calidad de datos, desde la precisi√≥n hasta la aptitud, proporcionando una gu√≠a esencial para evaluar y mejorar la robustez de los conjuntos de datos.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="86%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;strong&gt;Dimensi√≥n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Descripci√≥n&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üéØ Precisi√≥n (Accuracy)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Exactitud de los datos, es decir, qu√© tan cerca est√°n de la realidad o la verdad. Datos precisos son aquellos que reflejan con precisi√≥n la informaci√≥n que intentan representar.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üß© Integridad (Completeness)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mide la totalidad de los datos. Un conjunto de datos completo es aquel que no tiene valores faltantes o huecos significativos. La integridad de los datos es crucial para obtener una visi√≥n completa y precisa.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;‚úÖ Validez (Validity)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Indica si los datos est√°n en conformidad con las reglas y est√°ndares definidos. Los datos v√°lidos cumplen con las restricciones y criterios establecidos para un conjunto de datos espec√≠fico.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üîÑ Coherencia (Consistency)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Se refiere a la uniformidad de los datos a lo largo del tiempo y entre diferentes conjuntos de datos. Datos coherentes no presentan contradicciones o discrepancias cuando se comparan entre s√≠.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üìá Unicidad (Uniqueness)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Eval√∫a si no hay duplicados en los datos. Los datos √∫nicos garantizan que cada entidad o elemento est√© representado solo una vez en un conjunto de datos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;‚åõ Oportunidad (Timeliness)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Se refiere a la actualidad de los datos. La informaci√≥n oportuna es aquella que est√° disponible cuando se necesita, sin demoras innecesarias.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üèãÔ∏è Aptitud (Fitness)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Este aspecto eval√∫a la relevancia y utilidad de los datos para el prop√≥sito previsto. Los datos deben ser adecuados y aplicables a los objetivos espec√≠ficos de la organizaci√≥n o del an√°lisis que se est√© llevando a cabo.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="data-quality-dimensions--caso-de-uso"&gt;Data quality dimensions- caso de uso&lt;/h1&gt;
&lt;p&gt;A continuaci√≥n colocamos un ejemplo en el que se puede observar algunos problemas que tiene un caso de uso basado en eccommerce&lt;/p&gt;
&lt;table style="width:100%;"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="14%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="10%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;strong&gt;ID Transacci√≥n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ID Cliente&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Producto&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cantidad&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Precio Unitario&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;‚ö™ 1&lt;/td&gt;
&lt;td&gt;10234&lt;/td&gt;
&lt;td&gt;Laptop HP&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;$800&lt;/td&gt;
&lt;td&gt;$800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üü£ 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Auriculares Inal√°mbricos&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;$50&lt;/td&gt;
&lt;td&gt;$100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üîµ 3&lt;/td&gt;
&lt;td&gt;10235&lt;/td&gt;
&lt;td&gt;Tel√©fono Inteligente&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;$1000&lt;/td&gt;
&lt;td&gt;-$1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üü¢ 4&lt;/td&gt;
&lt;td&gt;10236&lt;/td&gt;
&lt;td&gt;Rat√≥n Inal√°mbrico&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;$30&lt;/td&gt;
&lt;td&gt;$90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üü¢ 4&lt;/td&gt;
&lt;td&gt;10237&lt;/td&gt;
&lt;td&gt;Teclado Inal√°mbrico&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;$40&lt;/td&gt;
&lt;td&gt;$80&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üü£ Fila 2 (Completeness):&lt;/strong&gt; La fila 2 no cumple con la integridad de los datos (Completeness) ya que falta el ID del cliente. La informaci√≥n sobre el cliente est√° incompleta, lo que dificulta el seguimiento de la transacci√≥n hasta un cliente espec√≠fico.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üîµFila 3 (Accuracy y Consistency):&lt;/strong&gt; La fila 3 presenta problemas de exactitud (Accuracy) y coherencia (Consistency). La cantidad de productos es negativa, lo cual es inexacto y va en contra de la consistencia esperada en un conjunto de datos de transacciones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üü¢Fila 4 (Unicidad):&lt;/strong&gt; La introducci√≥n de una segunda fila con el mismo ID de transacci√≥n (ID Transacci√≥n = 4) viola el principio de unicidad. Cada transacci√≥n debe tener un identificador √∫nico, y la presencia de dos filas con el mismo ID Transacci√≥n crea duplicados, afectando la unicidad de las transacciones.&lt;br /&gt;
&lt;/p&gt;
&lt;hr /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="python-frameworks"&gt;Python Frameworks&lt;/h1&gt;
&lt;p&gt;Los siguientes son algunas de las implementaciones realizadas en python para poder realizar validaciones de la calidad de los datos&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="74%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;strong&gt;Framework&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Descripci√≥n&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;a href="https://github.com/great-expectations/great_expectations"&gt;&lt;strong&gt;Great Expectations&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Great Expectations es una biblioteca open-source para la validaci√≥n de datos. Permite definir, documentar y validar expectativas sobre los datos, garantizando la calidad y consistencia en proyectos de ciencia de datos y an√°lisis.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;a href="https://github.com/unionai-oss/pandera"&gt;&lt;strong&gt;Pandera&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pandera es una biblioteca de validaci√≥n de datos para estructuras de datos en Python, especialmente dise√±ada para trabajar con DataFrames de pandas. Permite definir esquemas y reglas de validaci√≥n para asegurar la conformidad de los datos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;a href="https://github.com/NathanEpstein/Dora"&gt;&lt;strong&gt;Dora&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dora es una libreria python dise√±ada para automatizar exploraci√≥n de datos y realizar analisis de datos exploratorios&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Anlicemos algunas de las metricas que se pueden observar en sus repositorios de github, teniendo en cuenta que las metricas fueron obtenidas el &lt;code&gt;2023-11-12&lt;/code&gt;&lt;/p&gt;
&lt;table style="width:100%;"&gt;
&lt;colgroup&gt;
&lt;col width="24%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Metricas&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/great-expectations/great_expectations"&gt;&lt;strong&gt;Great Expectations&lt;/strong&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/unionai-oss/pandera"&gt;&lt;strong&gt;Pandera&lt;/strong&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/NathanEpstein/Dora"&gt;&lt;strong&gt;Dora&lt;/strong&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üë• Colaboradores&lt;/td&gt;
&lt;td&gt;399&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;‚ö†Ô∏è Issues abiertos&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;273&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üü¢ Issues Cerrados&lt;/td&gt;
&lt;td&gt;1642&lt;/td&gt;
&lt;td&gt;419&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;‚≠ê Stars&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;2700&lt;/td&gt;
&lt;td&gt;623&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üì∫ Watching&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üîé Forks&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;226&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üì¨ Open PR&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üêç Python version&lt;/td&gt;
&lt;td&gt;&amp;gt;=3.8&lt;/td&gt;
&lt;td&gt;&amp;gt;=3.7&lt;/td&gt;
&lt;td&gt;No especificada&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üìÑ Nro. Versiones&lt;/td&gt;
&lt;td&gt;233&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üìÑ &lt;a href="https://pypi.org/project/Dora/#history"&gt;Ultima Version&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.18.2&lt;/td&gt;
&lt;td&gt;0.17.2&lt;/td&gt;
&lt;td&gt;0.0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üìÜ Fecha Ultima Version&lt;/td&gt;
&lt;td&gt;9 Nov 2023&lt;/td&gt;
&lt;td&gt;30 sep 2023&lt;/td&gt;
&lt;td&gt;30 jun 2020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;üìÑ Tipo de licencia&lt;/td&gt;
&lt;td&gt;Apache-2.0 license&lt;/td&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;üìÑ Languages&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 95.1%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jupyter Notebook 4.3%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jinja 0.4%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript 0.1%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS 0.1%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 0.0%&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 99.9%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Makefile 0.1%&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Python100%&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="diferencias-entre-licencia-apache-2.0-y-mit"&gt;Diferencias entre Licencia Apache 2.0 y MIT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Notificaci√≥n de Cambios:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apache 2.0:&lt;/strong&gt; Requiere que se notifiquen los cambios realizados en el c√≥digo fuente cuando se distribuye el software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MIT:&lt;/strong&gt; No requiere notificaci√≥n espec√≠fica de cambios.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compatibilidad:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apache 2.0:&lt;/strong&gt; Es conocida por ser compatible con m√°s licencias en comparaci√≥n con MIT.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MIT:&lt;/strong&gt; Tambi√©n es bastante compatible con diversas licencias, pero la Licencia Apache 2.0 a menudo se elige en proyectos que buscan una mayor interoperabilidad con otras licencias.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Atribuci√≥n:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apache 2.0:&lt;/strong&gt; Requiere atribuci√≥n y la inclusi√≥n de un aviso de derechos de autor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MIT:&lt;/strong&gt; Requiere atribuci√≥n de la autor√≠a original, pero puede tener requisitos menos estrictos en t√©rminos de c√≥mo se muestra esa atribuci√≥n.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Teniendo en cuenta estas metricas actualmente analizadas vamos a realizar un ejemplo de una implementaci√≥n utilizando Pandera y Great expectations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id="dataset"&gt;Dataset&lt;/h2&gt;
&lt;p&gt;Para el desarrollo de este ejemplo utilizaremos el conjunto de datos denominado &lt;code&gt;Tips&lt;/code&gt;, el conjunto de datos se puede descargar del siguiente &lt;a href="https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El conjunto de datos ‚Äútips‚Äù que contiene informaci√≥n sobre las propinas dadas en un restaurante, junto con detalles sobre la factura total, el sexo de la persona que pag√≥ la factura, si el cliente es fumador, el d√≠a de la semana y la hora de la comida.&lt;/p&gt;
&lt;table style="width:99%;"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="77%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;strong&gt;Columna&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Descripci√≥n&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;total_bill&lt;/td&gt;
&lt;td&gt;El monto total de la factura (incluida la propina).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;tip&lt;/td&gt;
&lt;td&gt;La cantidad de propina dada.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;sex&lt;/td&gt;
&lt;td&gt;El g√©nero del pagador de la factura (hombre o mujer).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;smoker&lt;/td&gt;
&lt;td&gt;Si el cliente es fumador o no.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;day&lt;/td&gt;
&lt;td&gt;El d√≠a de la semana en que se realiz√≥ la comida.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;El momento del d√≠a (almuerzo o cena).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;El tama√±o del grupo que comparti√≥ la comida&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A continuaci√≥n una tabla con las primeras 5 filas del conjunto de datos:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;total_bill&lt;/th&gt;
&lt;th&gt;tip&lt;/th&gt;
&lt;th&gt;sex&lt;/th&gt;
&lt;th&gt;smoker&lt;/th&gt;
&lt;th&gt;day&lt;/th&gt;
&lt;th&gt;time&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;16.99&lt;/td&gt;
&lt;td&gt;1.01&lt;/td&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sun&lt;/td&gt;
&lt;td&gt;Dinner&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;10.34&lt;/td&gt;
&lt;td&gt;1.66&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sun&lt;/td&gt;
&lt;td&gt;Dinner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;21.01&lt;/td&gt;
&lt;td&gt;3.50&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sun&lt;/td&gt;
&lt;td&gt;Dinner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;23.68&lt;/td&gt;
&lt;td&gt;3.31&lt;/td&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sun&lt;/td&gt;
&lt;td&gt;Dinner&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;24.59&lt;/td&gt;
&lt;td&gt;3.61&lt;/td&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sun&lt;/td&gt;
&lt;td&gt;Dinner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h2 id="pandera"&gt;üü¢ Pandera&lt;/h2&gt;
&lt;p&gt;A continuci√≥n vamos a realizar un ejemplo de implementaci√≥n de Pandera utilizando el conjunto de datos anteriormente descripto.&lt;/p&gt;
&lt;h3 id="instalar-pandera"&gt;Instalar pandera&lt;/h3&gt;
&lt;pre class="bash"&gt;&lt;code&gt;pip install pandas pandera &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ejemplo-de-implementaci√≥n"&gt;Ejemplo de implementaci√≥n&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Importar pandas y pandera&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;import pandas as pd
import pandera as pa&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Importar el archivo del dataframe&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;path = &amp;#39;data/tips.csv&amp;#39;
data = pd.read_csv(path)

print(f&amp;quot;Numero de columnas: {data.shape[1]}, Numero de filas: {data.shape[0]}&amp;quot;)
print(f&amp;quot;Nombre de columnas: {list(data.columns)}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;data.info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;&amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
RangeIndex: 244 entries, 0 to 243
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   total_bill  244 non-null    float64
 1   tip         244 non-null    float64
 2   sex         244 non-null    object 
 3   smoker      244 non-null    object 
 4   day         244 non-null    object 
 5   time        244 non-null    object 
 6   size        244 non-null    int64  
dtypes: float64(2), int64(1), object(4)
memory usage: 13.5+ KB&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Ahora vamos a crear el objeto &lt;strong&gt;schema&lt;/strong&gt; que tiene todas las validaciones que queremos realizar.&lt;/p&gt;
&lt;p&gt;En el siguiente link puede encontrar otras validaciones que se pueden realizar &lt;a href="https://pandera.readthedocs.io/en/stable/dtype_validation.html" class="uri"&gt;https://pandera.readthedocs.io/en/stable/dtype_validation.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;schema = pa.DataFrameSchema({
  &amp;quot;total_bill&amp;quot;: pa.Column(float, checks=pa.Check.le(50)),
  &amp;quot;tip&amp;quot;       : pa.Column(float, checks=pa.Check.between(0,30)),
  &amp;quot;sex&amp;quot;       : pa.Column(str, checks=[pa.Check.isin([&amp;#39;Female&amp;#39;,&amp;#39;Male&amp;#39;])]),
  &amp;quot;smoker&amp;quot;    : pa.Column(str, checks=[pa.Check.isin([&amp;#39;No&amp;#39;,&amp;#39;Yes&amp;#39;])]),
  &amp;quot;day&amp;quot;       : pa.Column(str, checks=[pa.Check.isin([&amp;#39;Sun&amp;#39;,&amp;#39;Sat&amp;#39;])]),
  &amp;quot;time&amp;quot;      : pa.Column(str, checks=[pa.Check.isin([&amp;#39;Dinner&amp;#39;,&amp;#39;Lunch&amp;#39;])]),
  &amp;quot;size&amp;quot;      : pa.Column(int, checks=[pa.Check.between(1,4)])
})&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" style="list-style-type: decimal"&gt;
&lt;li&gt;Para poder obtener el error y posteriormente poder utilizar este output para analizarlo es necesario capturar el mismo con un exception.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;try:
    schema(data).validate()
except Exception as e:
    print(e)
    error = e&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;Schema None: A total of 3 schema errors were found.

Error Counts
------------
- SchemaErrorReason.SCHEMA_COMPONENT_CHECK: 3

Schema Error Summary
--------------------
schema_context column     check                     failure_cases  n_failure_cases
                                                   
Column         day        isin([&amp;#39;Sun&amp;#39;, &amp;#39;Sat&amp;#39;])      [Thur, Fri]             2
               size       in_range(1, 4)              [5, 6]                2
               total_bill less_than_or_equal_to(50)   [50.81]               1&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="5" style="list-style-type: decimal"&gt;
&lt;li&gt;A continuaci√≥n tienes una funci√≥n que te permite transformar el output en un diccionario o en un dataframe de pandas.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;def get_errors(error, dtype_dict=True):
    response = []

 
    for item in range(len(error.schema_errors)):
        error_item = error.schema_errors[item]
        response.append(
        {
            &amp;#39;column&amp;#39;     :error_item.schema.name,
            &amp;#39;check_error&amp;#39;:error_item.schema.checks[0].error,
            &amp;#39;num_cases&amp;#39;  :error_item.failure_cases.index.shape[0],
            &amp;#39;check_rows&amp;#39; :error_item.failure_cases.to_dict()
        })
    
    if dtype_dict:
        return response
    else:
        return pd.DataFrame(response)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;get_errors(error,dtype_dict=True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;[{&amp;#39;column&amp;#39;: &amp;#39;total_bill&amp;#39;,
  &amp;#39;check_error&amp;#39;: &amp;#39;less_than_or_equal_to(50)&amp;#39;,
  &amp;#39;num_cases&amp;#39;: 1,
  &amp;#39;check_rows&amp;#39;: {&amp;#39;index&amp;#39;: {0: 170}, &amp;#39;failure_case&amp;#39;: {0: 50.81}}},
 {&amp;#39;column&amp;#39;: &amp;#39;day&amp;#39;,
  &amp;#39;check_error&amp;#39;: &amp;quot;isin([&amp;#39;Sun&amp;#39;, &amp;#39;Sat&amp;#39;])&amp;quot;,
  &amp;#39;num_cases&amp;#39;: 81,
  &amp;#39;check_rows&amp;#39;: {&amp;#39;index&amp;#39;: {0: 77,
    1: 78,
    2: 79,
    3: 80,
    4: 81,
    5: 82,
    6: 83,
    7: 84,
...
    5: 156,
    6: 185,
    7: 187,
    8: 216},
   &amp;#39;failure_case&amp;#39;: {0: 6, 1: 6, 2: 5, 3: 6, 4: 5, 5: 6, 6: 5, 7: 5, 8: 5}}}]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="great-expectations"&gt;üü† Great Expectations&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Great Expectations&lt;/code&gt; es una biblioteca de c√≥digo abierto basada en Python para validar, documentar y crear perfiles de sus datos. La cual ayuda a mantener la calidad de los datos y mejorar la comunicaci√≥n sobre los datos entre equipos.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/xHMwVmW/gx.png" width="694" /&gt;&lt;/p&gt;
&lt;p&gt;source : &lt;a href="https://docs.greatexpectations.io/docs/" class="uri"&gt;https://docs.greatexpectations.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por lo cual podemos describir a Great Expectations como una herramienta de c√≥digo abierto dise√±ada para garantizar la calidad y confiabilidad de los datos en diversas fuentes, como bases de datos, tablas, archivos y dataframes. Su funcionamiento se basa en la creaci√≥n de grupos de validaciones que especifican las expectativas o reglas que los datos deben cumplir.&lt;/p&gt;
&lt;p&gt;Los siguientes son los pasos que debemos definir cuando utilizamos este framework:&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Definici√≥n de Expectativas&lt;/strong&gt;: Se especifican las expectativas que tienen sobre los datos. Estas expectativas pueden incluir restricciones simples, como rangos de valores, o reglas m√°s complejas sobre la coherencia y calidad de los datos.&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;Conexi√≥n a Fuentes de Datos&lt;/strong&gt;: En este paso se debe definir cuales son las conexiones que debemos realizar a las diversas fuentes de datos, como bases de datos, tablas, archivos o dataframes.&lt;/p&gt;
&lt;p&gt;3. &lt;strong&gt;Generaci√≥n de Suites de Validaciones&lt;/strong&gt;: A partir de las expectativas definidas, Great Expectations genera suites de validaciones que son conjuntos organizados de reglas que se aplicar√°n a los datos.&lt;/p&gt;
&lt;p&gt;4. &lt;strong&gt;Ejecuci√≥n de Validaciones&lt;/strong&gt;: Las suites de validaciones se aplican a los datos, verificando si cumplen con las expectativas definidas. Esto puede realizarse autom√°ticamente en un flujo de trabajo programado o de forma interactiva seg√∫n sea necesario.&lt;/p&gt;
&lt;p&gt;5. &lt;strong&gt;Generaci√≥n de An√°lisis y Reportes&lt;/strong&gt;: Great Expectations proporciona capacidades avanzadas de an√°lisis y generaci√≥n de informes. Esto incluye perfiles detallados de la calidad de los datos y reportes que resumen la salud general de los datos en funci√≥n de las expectativas.&lt;/p&gt;
&lt;p&gt;6. &lt;strong&gt;Alertas y Notificaciones&lt;/strong&gt;: En caso de que los datos no cumplan con las expectativas definidas, Great Expectations puede generar alertas o notificaciones, permitiendo a los usuarios tomar medidas inmediatas para abordar problemas de calidad de datos.&lt;/p&gt;
&lt;p&gt;En conjunto, Great Expectations ofrece una soluci√≥n integral para garantizar la calidad de los datos a lo largo del tiempo, facilitando la detecci√≥n temprana de problemas y brindando confianza en la integridad y utilidad de los datos utilizados en an√°lisis y toma de decisiones.&lt;/p&gt;
&lt;h3 id="instalaci√≥n-de-great-expectation"&gt;Instalaci√≥n de great expectation&lt;/h3&gt;
&lt;pre class="shell"&gt;&lt;code&gt;!pip install great_expectations==0.17.22 seaborn matplotlib numpy pandas&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ejemplo-de-implementaci√≥n-1"&gt;Ejemplo de implementaci√≥n&lt;/h3&gt;
&lt;pre class="python"&gt;&lt;code&gt;import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import os
import re 

import great_expectations as gx
from ruamel.yaml import YAML
from great_expectations.cli.datasource import sanitize_yaml_and_save_datasource
from great_expectations.core.expectation_configuration import ExpectationConfiguration

print(f&amp;quot;* great expectations version:{gx.__version__}&amp;quot;)
print(f&amp;quot;* seaborn version:{sns.__version__}&amp;quot;)
print(f&amp;quot;* numpy version:{np.__version__}&amp;quot;)
print(f&amp;quot;* pandas:{pd.__version__}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="shell"&gt;&lt;code&gt;* great expectations version:0.17.22
* seaborn version:0.13.0
* numpy version:1.26.1
* pandas:2.1.3&lt;/code&gt;&lt;/pre&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Importar dataset utilizando great expectation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;path = &amp;#39;data/tips.csv&amp;#39;
data_gx = gx.read_csv(path)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Listar todas las expectation disponibles por tipo&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;list_expectations = pd.DataFrame([item for item in dir(data_gx) if item.find(&amp;#39;expect_&amp;#39;)==0],columns=[&amp;#39;expectation&amp;#39;])
list_expectations[&amp;#39;expectation_type&amp;#39;] = np.select( [
        list_expectations.expectation.str.find(&amp;#39;_table_&amp;#39;)&amp;gt;0, 
        list_expectations.expectation.str.find(&amp;#39;_column_&amp;#39;)&amp;gt;0,  
        list_expectations.expectation.str.find(&amp;#39;_multicolumn_&amp;#39;)&amp;gt;0,
    ],[&amp;#39;table&amp;#39;,&amp;#39;column&amp;#39;,&amp;#39;multicolumn&amp;#39;],
    default=&amp;#39;other&amp;#39;
)

plt.figure(figsize=(20,6))
sns.countplot(x=list_expectations.expectation_type)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/M8D2pyf/gx-output.png" width="712" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;En la imagen se observa que las expectations disponibles son principalmente aplicadas a columnas (como por ejemplo: &lt;strong&gt;expect_column_max_to_be_between&lt;/strong&gt; ) y a tablas (como por ejemplo: &lt;strong&gt;expect_table_columns_to_match_set&lt;/strong&gt;) , aunque tambien se pueden aplicar una expectation basada en los valores de varias columnas (como por ejemplo:&lt;strong&gt;expect_multicolumn_values_to_be_unique&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="expectations-tables"&gt;Expectations: Tables&lt;/h4&gt;
&lt;pre class="python"&gt;&lt;code&gt;# La siguiente lista contiene las colmnas que debe tener el dataframe
columns = [&amp;#39;total_bill&amp;#39;, &amp;#39;tip&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;smoker&amp;#39;, &amp;#39;day&amp;#39;, &amp;#39;time&amp;#39;, &amp;#39;size&amp;#39;]
data_gx.expect_table_columns_to_match_set(column_set = columns)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;{
  &amp;quot;success&amp;quot;: true,
  &amp;quot;result&amp;quot;: {
    &amp;quot;observed_value&amp;quot;: [
      &amp;quot;total_bill&amp;quot;,
      &amp;quot;tip&amp;quot;,
      &amp;quot;sex&amp;quot;,
      &amp;quot;smoker&amp;quot;,
      &amp;quot;day&amp;quot;,
      &amp;quot;time&amp;quot;,
      &amp;quot;size&amp;quot;
    ]
  },
  &amp;quot;meta&amp;quot;: {},
  &amp;quot;exception_info&amp;quot;: {
    &amp;quot;raised_exception&amp;quot;: false,
    &amp;quot;exception_traceback&amp;quot;: null,
    &amp;quot;exception_message&amp;quot;: null
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Ahora borramos dos columnas que son &amp;quot;time&amp;quot; y &amp;quot;size&amp;quot; para validar cual es el resultado.

columns = = [&amp;#39;total_bill&amp;#39;, &amp;#39;tip&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;smoker&amp;#39;, &amp;#39;day&amp;#39;]
data_gx.expect_table_columns_to_match_set(column_set = columns)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Si observamos el resultado es &lt;code&gt;False&lt;/code&gt; y en details nos detallan cuales son las columnas que el dataframe tiene adicionales a las que se esperaban.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="bash"&gt;&lt;code&gt;{
  &amp;quot;success&amp;quot;: false,
  &amp;quot;result&amp;quot;: {
    &amp;quot;observed_value&amp;quot;: [
      &amp;quot;day&amp;quot;,
      &amp;quot;sex&amp;quot;,
      &amp;quot;size&amp;quot;,
      &amp;quot;smoker&amp;quot;,
      &amp;quot;time&amp;quot;,
      &amp;quot;tip&amp;quot;,
      &amp;quot;total_bill&amp;quot;
    ],
    &amp;quot;details&amp;quot;: {
      &amp;quot;mismatched&amp;quot;: {
        &amp;quot;unexpected&amp;quot;: [
          &amp;quot;size&amp;quot;,
          &amp;quot;time&amp;quot;
        ]
      }
    }
  },
  &amp;quot;meta&amp;quot;: {},
  &amp;quot;exception_info&amp;quot;: {
    &amp;quot;raised_exception&amp;quot;: false,
    &amp;quot;exception_traceback&amp;quot;: null,
    &amp;quot;exception_message&amp;quot;: null
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="expectations-columns"&gt;Expectations: Columns&lt;/h4&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Validemos que existe un valor categorico dentro de una columna&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;data_gx[&amp;#39;total_bill_group&amp;#39;] = pd.cut(data_gx[&amp;#39;total_bill&amp;#39;],
                              bins=[0,10,20,30,40,50,float(&amp;#39;inf&amp;#39;)], 
                              labels=[&amp;#39;0-10&amp;#39;, &amp;#39;10-20&amp;#39;, &amp;#39;20-30&amp;#39;, &amp;#39;30-40&amp;#39;, &amp;#39;40-50&amp;#39;, &amp;#39;&amp;gt;50&amp;#39;],
                              right=False, 
                              include_lowest=True)

# Ahora validamos si 3 categorias existen dentro del conjunto de datos

data_gx.expect_column_distinct_values_to_contain_set(column=&amp;#39;total_bill_group&amp;#39;,
                                                      value_set=[&amp;#39;0-10&amp;#39;,&amp;#39;10-20&amp;#39;, &amp;#39;20-30&amp;#39;],
                                                      result_format=&amp;#39;BASIC&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;{
  &amp;quot;success&amp;quot;: true,
  &amp;quot;result&amp;quot;: {
    &amp;quot;observed_value&amp;quot;: [
      &amp;quot;0-10&amp;quot;,
      &amp;quot;10-20&amp;quot;,
      &amp;quot;20-30&amp;quot;,
      &amp;quot;30-40&amp;quot;,
      &amp;quot;40-50&amp;quot;,
      &amp;quot;&amp;gt;50&amp;quot;
    ],
    &amp;quot;element_count&amp;quot;: 244,
    &amp;quot;missing_count&amp;quot;: null,
    &amp;quot;missing_percent&amp;quot;: null
  },
  &amp;quot;meta&amp;quot;: {},
  &amp;quot;exception_info&amp;quot;: {
    &amp;quot;raised_exception&amp;quot;: false,
    &amp;quot;exception_traceback&amp;quot;: null,
    &amp;quot;exception_message&amp;quot;: null
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Validemos que la columna no tiene valor nulos&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;data_gx.expect_column_values_to_not_be_null(&amp;#39;sex&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;{
  &amp;quot;success&amp;quot;: true,
  &amp;quot;result&amp;quot;: {
    &amp;quot;element_count&amp;quot;: 244,
    &amp;quot;unexpected_count&amp;quot;: 0,
    &amp;quot;unexpected_percent&amp;quot;: 0.0,
    &amp;quot;unexpected_percent_total&amp;quot;: 0.0,
    &amp;quot;partial_unexpected_list&amp;quot;: []
  },
  &amp;quot;meta&amp;quot;: {},
  &amp;quot;exception_info&amp;quot;: {
    &amp;quot;raised_exception&amp;quot;: false,
    &amp;quot;exception_traceback&amp;quot;: null,
    &amp;quot;exception_message&amp;quot;: null
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="great-expectation-project"&gt;Great Expectation Project&lt;/h4&gt;
&lt;p&gt;Ahora vamos a genera un proyecto de great expectation para poder ejecutar un grupo de validaciones basados en uno o varios conjuntos de datos.&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Inicializar el proyecto de great expectation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt; !yes Y | great_expectations init&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;  ___              _     ___                  _        _   _
 / __|_ _ ___ __ _| |_  | __|_ ___ __  ___ __| |_ __ _| |_(_)___ _ _  ___
| (_ | &amp;#39;_/ -_) _` |  _| | _|\ \ / &amp;#39;_ \/ -_) _|  _/ _` |  _| / _ \ &amp;#39; \(_-&amp;lt;
 \___|_| \___\__,_|\__| |___/_\_\ .__/\___\__|\__\__,_|\__|_\___/_||_/__/
                                |_|
             ~ Always know what to expect from your data ~

Let&amp;#39;s create a new Data Context to hold your project configuration.

Great Expectations will create a new directory with the following structure:

    great_expectations
    |-- great_expectations.yml
    |-- expectations
    |-- checkpoints
    |-- plugins
    |-- .gitignore
    |-- uncommitted
        |-- config_variables.yml
        |-- data_docs
        |-- validations

OK to proceed? [Y/n]: 
================================================================================

Congratulations! You are now ready to customize your Great Expectations configuration.

You can customize your configuration in many ways. Here are some examples:

  Use the CLI to:
    - Run `great_expectations datasource new` to connect to your data.
    - Run `great_expectations checkpoint new &amp;lt;checkpoint_name&amp;gt;` to bundle data with Expectation Suite(s) in a Checkpoint for later re-validation.
    - Run `great_expectations suite --help` to create, edit, list, profile Expectation Suites.
    - Run `great_expectations docs --help` to build and manage Data Docs sites.

  Edit your configuration in great_expectations.yml to:
    - Move Stores to the cloud
    - Add Slack notifications, PagerDuty alerts, etc.
    - Customize your Data Docs

Please see our documentation for more configuration options!&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Copiar datos dentro de la carpeta de ‚Äúgx‚Äù generada a partir de la inicializaci√≥n del proyecto&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;!cp -r data gx&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;# vamos a imprimir el contenido de la carpeta

def print_directory_structure(directory_path, indent=0):
    current_dir = os.path.basename(directory_path)
    print(&amp;quot;    |&amp;quot; + &amp;quot;    &amp;quot; * indent + f&amp;quot;-- {current_dir}&amp;quot;)
    indent += 1
    with os.scandir(directory_path) as entries:
        for entry in entries:
            if entry.is_dir():
                print_directory_structure(entry.path, indent)
            else:
                print(&amp;quot;    |&amp;quot; + &amp;quot;    &amp;quot; * indent + f&amp;quot;-- {entry.name}&amp;quot;)


print_directory_structure(&amp;#39;gx&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;    |-- gx
    |    -- great_expectations.yml
    |    -- plugins
    |        -- custom_data_docs
    |            -- renderers
    |            -- styles
    |                -- data_docs_custom_styles.css
    |            -- views
    |    -- checkpoints
    |    -- expectations
    |        -- .ge_store_backend_id
    |    -- profilers
    |    -- .gitignore
    |    -- data
    |        -- tips.csv
    |    -- uncommitted
    |        -- data_docs
    |        -- config_variables.yml
    |        -- validations
    |            -- .ge_store_backend_id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algunas aclaraciones sobre los archivos y carpetas que se generan en esta carpeta:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="84%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Archivos/Carpetas&lt;/th&gt;
&lt;th&gt;Descripci√≥n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üìÑ great_expectations.yml&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Este archivo contiene la configuraci√≥n principal del proyecto. Aqu√≠ se especifican detalles como las ubicaciones de almacenamiento y otros par√°metros de configuraci√≥n.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ plugins&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;strong&gt;custom_data_docs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÑrenderers:&lt;/strong&gt; Contiene renderizadores personalizados para documentos de datos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÑ styles:&lt;/strong&gt; Incluye estilos personalizados para los documentos de datos, como hojas de estilo CSS (&lt;strong&gt;&lt;code&gt;data_docs_custom_styles.css&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÑ views:&lt;/strong&gt; Puede contener vistas personalizadas para los documentos de datos.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ checkpoints&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Esta carpeta podr√≠a contener definiciones de checkpoints, que son puntos en el flujo de datos donde se pueden realizar validaciones espec√≠ficas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ expectations&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Aqu√≠ se almacenan las expectativas definidas para los datos. Este directorio puede contener varias subcarpetas y archivos, dependiendo de la organizaci√≥n del proyecto.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ profilers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Puede contener configuraciones para perfiles de datos, que son an√°lisis detallados de las estad√≠sticas de los datos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üìÑ .gitignore&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Es un archivo de configuraci√≥n para Git que especifica archivos y carpetas que deben ignorarse al realizar operaciones de seguimiento y compromiso (commit)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ data&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Contiene los datos utilizados en el proyecto, en este caso, el archivo &lt;strong&gt;&lt;code&gt;tips.csv&lt;/code&gt;&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;strong&gt;üìÇ uncommitted&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÇdata_docs:&lt;/strong&gt; Carpeta donde se generan documentos de datos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÑconfig_variables.yml:&lt;/strong&gt; Archivo de configuraci√≥n que puede contener variables espec√≠ficas del proyecto.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;üìÇvalidations:&lt;/strong&gt; Puede contener resultados de validaciones realizadas en los datos.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Configuraci√≥n de datasource y data conectors&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DataSource:&lt;/strong&gt; Es el origen de datos utilizado (puede ser un archivo, API, base de datos, entre otros.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Connectors&lt;/strong&gt;: Son los conectores que facilitan la conexion a la fuentes de datos y donde se deben definir las credenciales de acceso, ubicaci√≥n, entre otros.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;datasource_name_file = &amp;#39;tips.csv&amp;#39;
datasource_name = &amp;#39;datasource_tips&amp;#39;
dataconnector_name = &amp;#39;connector_tips&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Creamos la configuraci√≥n del datasource

context = gx.data_context.DataContext()
my_datasource_config = f&amp;quot;&amp;quot;&amp;quot;
    name: {datasource_name}
    class_name: Datasource
    execution_engine:
      class_name: PandasExecutionEngine
    data_connectors:
      {dataconnector_name}:
        class_name: InferredAssetFilesystemDataConnector
        base_directory: data
        default_regex:
          group_names:
            - data_asset_name
          pattern: (.*)
      default_runtime_data_connector_name:
        class_name: RuntimeDataConnector
        assets:
          my_runtime_asset_name:
            batch_identifiers:
              - runtime_batch_identifier_name
&amp;quot;&amp;quot;&amp;quot;

yaml = YAML()
context.add_datasource(**yaml.load(my_datasource_config))
sanitize_yaml_and_save_datasource(context, my_datasource_config, overwrite_existing=True)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" style="list-style-type: decimal"&gt;
&lt;li&gt;Configuraci√≥n de las expectations&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;En el siguiente fragmento de c√≥digo, se presenta la configuraci√≥n de tres expectativas (expectations).&lt;/p&gt;
&lt;p&gt;En particular, la √∫ltima de ellas incluye un par√°metro denominado &lt;code&gt;"mostly"&lt;/code&gt; con un valor de 0.75. Este par√°metro indica que la expectativa puede fallar en hasta un 25% de los casos, ya que, por defecto, se espera un cumplimiento del 100% a menos que se especifique lo contrario.&lt;/p&gt;
&lt;p&gt;Adicionalmente se puede especificar un mensaje de error en formato markdown, tal como se visualiza en la ultima expectation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="python"&gt;&lt;code&gt;expectation_configuration_table =  ExpectationConfiguration(
   expectation_type=&amp;quot;expect_table_columns_to_match_set&amp;quot;,
      kwargs= {
        &amp;quot;column_set&amp;quot;: [&amp;#39;total_bill&amp;#39;, &amp;#39;tip&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;smoker&amp;#39;, &amp;#39;day&amp;#39;, &amp;#39;time&amp;#39;, &amp;#39;size&amp;#39;]
      },
      meta= {}
)

expectation_configuration_total_bill = ExpectationConfiguration(
      expectation_type= &amp;quot;expect_column_values_to_be_between&amp;quot;,
      kwargs= {
        &amp;quot;column&amp;quot;: &amp;quot;total_bill&amp;quot;,
        &amp;quot;min_value&amp;quot;: 0,
        &amp;quot;max_value&amp;quot;: 100
      },
      meta= {}
)


expectation_configuration_size = ExpectationConfiguration(
   expectation_type=&amp;quot;expect_column_values_to_not_be_null&amp;quot;,
   kwargs={
      &amp;quot;column&amp;quot;: &amp;quot;size&amp;quot;,
      &amp;quot;mostly&amp;quot;: 0.75,
   },
   meta={
      &amp;quot;notes&amp;quot;: {
         &amp;quot;format&amp;quot;: &amp;quot;markdown&amp;quot;,
         &amp;quot;content&amp;quot;: &amp;quot;Expectation to validate column `size` does not have null values.&amp;quot;
      }
   }
)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="5" style="list-style-type: decimal"&gt;
&lt;li&gt;Creaci√≥n de la suite expectation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;expectation_suite_name = &amp;quot;tips_expectation_suite&amp;quot;
expectation_suite = context.create_expectation_suite(
    expectation_suite_name=expectation_suite_name, 
    overwrite_existing=True
)

# Add expectations
expectation_suite.add_expectation(expectation_configuration=expectation_configuration_table)
expectation_suite.add_expectation(expectation_configuration=expectation_configuration_total_bill)
expectation_suite.add_expectation(expectation_configuration=expectation_configuration_size)

# save expectation_suite
context.save_expectation_suite(expectation_suite=expectation_suite, 
                               expectation_suite_name=expectation_suite_name)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;data-quality/gx/expectations/tips_expectation_suite.json&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Dentro de la carpeta &lt;code&gt;expectations&lt;/code&gt; se crea un archivo json con todas las expectations generadas anteriormente.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="6" style="list-style-type: decimal"&gt;
&lt;li&gt;Configuraci√≥n de los checkpoints&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;checkpoint_name =&amp;#39;tips_checkpoint&amp;#39;

config_checkpoint = f&amp;quot;&amp;quot;&amp;quot;
    name: {checkpoint_name}
    config_version: 1
    class_name: SimpleCheckpoint
    expectation_suite_name: {expectation_suite_name}
    validations:
      - batch_request:
          datasource_name: {datasource_name}
          data_connector_name: {dataconnector_name}
          data_asset_name: {datasource_name_file}
          batch_spec_passthrough:
            reader_method: read_csv
            reader_options: 
              sep: &amp;quot;,&amp;quot;
          data_connector_query:
            index: -1
        expectation_suite_name: {expectation_suite_name}
&amp;quot;&amp;quot;&amp;quot;

# Validar si la estructura del yaml es correcta
context.test_yaml_config(config_checkpoint)

# Agregar el checkpoint al contexto generado
context.add_checkpoint(**yaml.load(config_checkpoint)) &lt;/code&gt;&lt;/pre&gt;
&lt;ol start="7" style="list-style-type: decimal"&gt;
&lt;li&gt;Ejecutar el checkpoint para validar todas las expectations configuradas sobre el conjunto de datos&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;response = context.run_checkpoint(checkpoint_name=checkpoint_name)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="8" style="list-style-type: decimal"&gt;
&lt;li&gt;Para observar el resultado obtenido de las validaciones se puede convertir a json&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt; response.to_json_dict()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;{&amp;#39;run_id&amp;#39;: {&amp;#39;run_name&amp;#39;: None, &amp;#39;run_time&amp;#39;: &amp;#39;2023-11-12T20:39:23.346946+01:00&amp;#39;},
 &amp;#39;run_results&amp;#39;: {&amp;#39;ValidationResultIdentifier::tips_expectation_suite/__none__/20231112T193923.346946Z/722b2e93e32fd7222c8ad9339f3e0e1d&amp;#39;: {&amp;#39;validation_result&amp;#39;: {&amp;#39;success&amp;#39;: True,
    &amp;#39;results&amp;#39;: [{&amp;#39;success&amp;#39;: True,
      &amp;#39;expectation_config&amp;#39;: {&amp;#39;expectation_type&amp;#39;: &amp;#39;expect_table_columns_to_match_set&amp;#39;,
       &amp;#39;kwargs&amp;#39;: {&amp;#39;column_set&amp;#39;: [&amp;#39;total_bill&amp;#39;,
         &amp;#39;tip&amp;#39;,
         &amp;#39;sex&amp;#39;,
         &amp;#39;smoker&amp;#39;,
         &amp;#39;day&amp;#39;,
         &amp;#39;time&amp;#39;,
         &amp;#39;size&amp;#39;],
        &amp;#39;batch_id&amp;#39;: &amp;#39;722b2e93e32fd7222c8ad9339f3e0e1d&amp;#39;},
       &amp;#39;meta&amp;#39;: {}},
      &amp;#39;result&amp;#39;: {&amp;#39;observed_value&amp;#39;: [&amp;#39;total_bill&amp;#39;,
        &amp;#39;tip&amp;#39;,
        &amp;#39;sex&amp;#39;,
        &amp;#39;smoker&amp;#39;,
        &amp;#39;day&amp;#39;,
        &amp;#39;time&amp;#39;,
        &amp;#39;size&amp;#39;]},
      &amp;#39;meta&amp;#39;: {},
      &amp;#39;exception_info&amp;#39;: {&amp;#39;raised_exception&amp;#39;: False,
       &amp;#39;exception_traceback&amp;#39;: None,
       &amp;#39;exception_message&amp;#39;: None}},
     {&amp;#39;success&amp;#39;: True,
...
  &amp;#39;notify_on&amp;#39;: None,
  &amp;#39;default_validation_id&amp;#39;: None,
  &amp;#39;site_names&amp;#39;: None,
  &amp;#39;profilers&amp;#39;: []},
 &amp;#39;success&amp;#39;: True}&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="obtener-los-resultados"&gt;Obtener los resultados&lt;/h4&gt;
&lt;pre class="python"&gt;&lt;code&gt; context.open_data_docs()&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Al ejecutar este chunck de codigo se va abrir un archivo html con el resultado de las validaciones que esta en &lt;code&gt;gx/uncommitted/data_docs/local_site/validations/tips_expectation_suite/__none__/20231112T192529.002401Z/722b2e93e32fd7222c8ad9339f3e0e1d.html&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/YfzkPPb/gx-1.png" width="684" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/SrmjBcM/gx-2.png" width="684" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.ibb.co/Bs0LWjF/gx-3.png" width="683" height="258" /&gt;&lt;/p&gt;
&lt;h2 id="si-quieres-aprender"&gt;Si quieres aprender‚Ä¶&lt;/h2&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;a href="https://pandera.readthedocs.io"&gt;Pandera Documentaci√≥n Oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.researchgate.net/publication/343231859_pandera_Statistical_Data_Validation_of_Pandas_Dataframes"&gt;Pandera: Statistical Data Validation of Pandas Dataframes - Researchgate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.greatexpectations.io/docs/"&gt;Great Expectation Documentaci√≥n Oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/data-quality-fundamentals/9781098112035/"&gt;Data Quality Fundamentals Book O‚Äôrelly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/@GreatExpectationsData"&gt;Great Expectation Yoututbe Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>2c74fc3c9b01f34963f12d1e1c5f5c66</distill:md5>
      <category>Data</category>
      <category>Python</category>
      <guid>https://r0mymendez.github.io/posts/2023-11-12-data-quality</guid>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/free-vector/statistics-concept-illustration_114360-4254.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>AWS Copilot</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2022-10-06-aws-copilot</link>
      <description>En el siguiente art√≠culo te cuento que es AWS Copilot, como se utiliza este proyecto y la facilidad de implementarlo.</description>
      <category>Cloud Computing</category>
      <guid>https://r0mymendez.github.io/posts/2022-10-06-aws-copilot</guid>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/free-vector/two-users-searchig-big-data-cloud-computing-storage-technology-large-database-data-analysis-digital-information-concept-vector-isolated-illustration_335657-2200.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>10 sitios para aprender [gratis] Git!</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2022-07-23-aprender-git</link>
      <description>Si quieres aprender Git aqu√≠ te dejo recursos para poder lograr este objetivo.</description>
      <category>Metodologias</category>
      <guid>https://r0mymendez.github.io/posts/2022-07-23-aprender-git</guid>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/free-vector/team-programmers-working-program-code-with-laptops-teamwork-male-female-professional-testers-coders-flat-vector-illustration-software-development-programming-lesson-concept_74855-22051.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Convi√©rtete en una data analyst de pel√≠cula</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2022-07-17-adalab-workshop-python</link>
      <description>Este es el workshop de python en el cual analizamos un conjunto de datos de Neflix  y el mismo fue realizado de forma online para la comunidad de Adalab</description>
      <category>DataViz</category>
      <category>Python</category>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2022-07-17-adalab-workshop-python</guid>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/free-vector/people-watching-movie-home_23-2148568229.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Agile inception</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2022-07-17-agile-inception</link>
      <description>En el siguiente art√≠culo te cuento sobre un conjunto de actividades que te permiten reducir la incertidumbre y alinear a todas las personas de un equipo de producto para que puedan tener objetivos comunes.</description>
      <category>Metodologias</category>
      <guid>https://r0mymendez.github.io/posts/2022-07-17-agile-inception</guid>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/free-vector/happy-united-business-team_74855-6520.jpg?" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>Notas en Medios</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2021-09-22-notas-en-medios</link>
      <description>Este post contiene algunas de las notas que pude realizar en algunos portales de noticias en Argentina</description>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2021-09-22-notas-en-medios</guid>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/vector-gratis/concepto-landing-page-noticias_52683-20522.jpg?size=626&amp;ext=jpg" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>RabbitMQ-Pika</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts/2021-09-10-rabbitmq-pika</link>
      <description>RabbitMQ permite gestionar colas de mensajes entre emisores y destinatarios, en el siguiente post vamos a utilizar en python **Pika** para su implementaci√≥n.</description>
      <category>Python</category>
      <guid>https://r0mymendez.github.io/posts/2021-09-10-rabbitmq-pika</guid>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      <media:content url="https://image.freepik.com/free-vector/landing-page-send-message-illustration_126608-31.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>14 Apps Gratuitas para Proyectos</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-02-21-apps-gratuitas-para-proyectos</link>
      <description>En el siguiente articulo te cuento sobre algunas aplicaciones free para utilizar en tus proyectos.</description>
      <category>Metodologias</category>
      <guid>https://r0mymendez.github.io/posts/2021-02-21-apps-gratuitas-para-proyectos</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://image.freepik.com/free-vector/tiny-people-developers-laptop-customer-requirements-software-requirement-description-user-case-agile-tool-business-analysis-concept_335657-2433.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>CheatSheet SQL</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-02-21-cheatsheet-sql</link>
      <description>En el siguiente post puedes encontrar una cheetsheet de SQ, en la cual puedes encontrar un resumen y ejemplos de la sintaxis de SQL.</description>
      <category>Base de datos</category>
      <category>SQL</category>
      <guid>https://r0mymendez.github.io/posts/2021-02-21-cheatsheet-sql</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://image.freepik.com/free-vector/cloud-hosting-concept-illustration_114360-730.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Introducci√≥n a DataViz con Python</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-02-21-introduccin-a-visualizaciones-con-python</link>
      <description>Da tus primeros pasos en el desarrollo de visualizaciones con Python.</description>
      <category>DataViz</category>
      <category>Python</category>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2021-02-21-introduccin-a-visualizaciones-con-python</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://image.freepik.com/vector-gratis/ilustracion-analisis-mercado-valores_23-2148588123.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Introducci√≥n a Visualizaciones con R</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-02-21-introduccin-a-visualizaciones-con-r</link>
      <description>Primeros pasos para comenzar a realizar tus primeras visualizaciones en R.</description>
      <category>DataViz</category>
      <category>R</category>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2021-02-21-introduccin-a-visualizaciones-con-r</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://i.ibb.co/v1FjcLs/6151069.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Dataviz: Datos de Miercoles</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-03-06-dataviz-datos-de-miercoles</link>
      <description>En este contiene las visualizaciones que realice para Datos de Miercoles.</description>
      <category>DataViz</category>
      <category>R</category>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2021-03-06-dataviz-datos-de-miercoles</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://i.ibb.co/TtmWkhn/3156627.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>¬øD√≥nde est√° mi monopat√≠n?üõπ</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-03-06-dnde-est-mi-monopatn</link>
      <description>Recursos del evento IWD2020 (International Womens Day) de Women Techmakers, en el cual utilizamos python para encontrar monopatines en la Ciudad Autonoma de Buenos Airesüìç.</description>
      <category>DataViz</category>
      <category>Python</category>
      <category>Data</category>
      <guid>https://r0mymendez.github.io/posts/2021-03-06-dnde-est-mi-monopatn</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://img.freepik.com/vector-gratis/hombre-montando-patinete-electrico-otono-concepto-transporte-ecologico_254685-275.jpg?size=626&amp;ext=jpg" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>Fundamentos de Testing</title>
      <dc:creator>Romina Mendez</dc:creator>
      <dc:creator/>
      <link>https://r0mymendez.github.io/posts/2021-03-06-fundamentos-de-testing</link>
      <description>El testing es uno de los procesos de la ingenier√≠a de software que permite identificar defectos en el software
En este post podes encontrar los fundamentos para poder realizalo de manera practica en cualquier proyecto de desarrollo.</description>
      <category>Python</category>
      <category>Tesing</category>
      <guid>https://r0mymendez.github.io/posts/2021-03-06-fundamentos-de-testing</guid>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://image.freepik.com/free-vector/tiny-people-testing-quality-assurance-software-isolated-flat-vector-illustration-cartoon-character-fixing-bugs-hardware-device-application-test-it-service-concept_74855-10172.jpg" medium="image" type="image/jpeg"/>
    </item>
  </channel>
</rss>
