<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Romy Mendez</title>
    <link>https://r0mymendez.github.io/</link>
    <atom:link href="https://r0mymendez.github.io/blog_en.xml" rel="self" type="application/rss+xml"/>
    <description>Romina Mendez's personal blog/ site. Some  posts
on software, agile methodologies , data science and the professor life.
</description>
    <image>
      <title>Romy Mendez</title>
      <url>https://r0mymendez.github.io/image/favicon.ico</url>
      <link>https://r0mymendez.github.io/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Mon, 01 Apr 2024 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Simplify Database Migrations using Python with Alembic</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic</link>
      <description>


&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/r0mymendez"&gt;&lt;img src="https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support%20my%20work-FFDD00?style=flat&amp;amp;labelColor=101010&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=white" style="width:40.0%" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following article will discuss working with database migration using the popular Python library called Alembic. However, before diving into this tutorial, we’ll mention some definitions that will help us better understand how Alembic works and the best way to implement database migration.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="orm-object-relational-mapping"&gt;🟣 ORM (Object Relational Mapping)&lt;/h1&gt;
&lt;p&gt;The ORM (Object Relational Mapping) is a layer that allows connecting &lt;strong&gt;object-oriented&lt;/strong&gt; programming with relational databases, abstracting the underlying SQL queries.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/sql-alchemy-orm.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="sqlalchemy"&gt;🟣 SQLAlchemy&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;SQLAlchemy&lt;/strong&gt; is a 🐍 python library that implements ORM and allows you to perform different actions on a related database.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/sql-alchemy.png" /&gt;&lt;/p&gt;
&lt;p&gt;The following are the key components of SQLAlchemy to understand how it interacts with the database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;🟣 Engine&lt;/strong&gt;: It is the interface that allows interaction with the database. It handles connections and executes queries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;🟣 Pool&lt;/strong&gt;: It is a collection of connections that allows reusing connections and improving query performance by reducing time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;🟣 Dialect&lt;/strong&gt;: It is the component that allows interaction with the database. Each dialect is designed to interact and translate queries for a database; By default, this library has dialects for MySQL, MariaDB, PostgreSQL, SQL Server, and Oracle. But there are external dialects, in which you should import other libraries, which you can see in the following image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;🟣 DBAPI&lt;/strong&gt;: It is the interface that provides methods to enable communication between Python and the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/sql-alchemydialects.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Below is a simple example of how to execute a query in SQL and SQLAlchemy:&lt;/p&gt;
&lt;pre class="sql"&gt;&lt;code&gt;SELECT 
    customer_id, 
    customer_unique_id,
    customer_zip_code_prefix, 
    customer_city, 
    customer_state 
FROM ecommerce.customers 
LIMIT 10;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="python"&gt;&lt;code&gt;from sqlalchemy import Column, Integer, String,create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Create a base class which allows us to define classes that map to tables
Base = declarative_base()

# Define the class that maps to the table
class Customer(Base):
    __tablename__ = &amp;#39;customers&amp;#39;  # Cambia a minúsculas
    __table_args__ = {&amp;#39;schema&amp;#39;: &amp;#39;ecommerce&amp;#39;}

    customer_id = Column(Integer, primary_key=True)
    customer_unique_id = Column(Integer)
    customer_zip_code_prefix= Column(Integer)
    customer_city= Column(String)
    customer_state = Column(String)

# Create an engine that connects to the PostgreSQL server
conn =&amp;#39;postgresql://postgres:postgres@localhost/postgres&amp;#39;
engine = create_engine(conn)

# Create a session
conn_session = sessionmaker(bind=engine)
session = conn_session()

# Execute the query
customers = session.query(Customer).limit(10)

# Extract the data and create a list of tuples
data = [ (customer.customer_id,
          customer.customer_unique_id,
          customer.customer_zip_code_prefix,
          customer.customer_city,
          customer.customer_state) 
    for customer in customers]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h1 id="database-migrations"&gt;🟣 Database migrations&lt;/h1&gt;
&lt;p&gt;A migration is the process that allows you to modify the structure of the database, these migrations are created to maintain consistency and integrity.&lt;/p&gt;
&lt;h3 id="what-are-the-benefits-of-using-migrations"&gt;🟣 What are the benefits of using migrations?&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/benefits-migration.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;Version Control&lt;/strong&gt;: Avoids manual intervention in the database by maintaining control over schema versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;Environment Management&lt;/strong&gt;: Facilitates the creation of new environments through the application of migrations, enabling easy reproduction of specific configurations and maintaining coherence between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;Upgrade &amp;amp; Downgrade&lt;/strong&gt;: Another benefit is the ability not only to apply changes but also to revert them. This provides flexibility and security in database management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;Auditing&lt;/strong&gt;: Alembic-audit is another library that can be implemented to maintain a chronological record of changes made to the database, facilitating traceability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;CI/CD Integration&lt;/strong&gt;: Easily integrates into CI/CD pipelines to apply database changes automatically, streamlining and ensuring consistency in application deployment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🟣 &lt;strong&gt;Standardization&lt;/strong&gt;: This implementation enables cleaner, structured, and coherent development for defining and applying changes to the database schema. By using templates, script reuse is promoted, ensuring efficient and consistent management of database changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="what-is-alembic"&gt;🟣 What is Alembic?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Alembic&lt;/strong&gt; is a 🐍Python library that enables controlled and automated database migrations. This library utilizes &lt;code&gt;SQLAlchemy&lt;/code&gt; and it allows for the management of changes in the database schema through &lt;strong&gt;scripts&lt;/strong&gt;, which describe the modifications and can be applied automatically.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/alemic-flow.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="what-is-audit-alembic"&gt;🟣 What is Audit alembic?&lt;/h1&gt;
&lt;p&gt; &lt;strong&gt;Audit Alembic&lt;/strong&gt; is a 🐍Python library that complements Alembic by providing an audit table with a detailed record of applied changes.&lt;/p&gt;
&lt;p&gt;While &lt;strong&gt;Alembic&lt;/strong&gt; typically maintains only a table in the database with the &lt;code&gt;ID&lt;/code&gt; of the last applied migration and allows tracking files using the &lt;code&gt;history&lt;/code&gt; command, Audit Alembic goes a step further by creating an additional table that facilitates change tracking and enables the addition of metadata to applied transactions.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="26%" /&gt;
&lt;col width="73%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;column_name&lt;/th&gt;
&lt;th&gt;column_description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;unique identifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;code&gt;alembic_version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;version of the migration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;prev_alembic_version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;previous version of the migration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;code&gt;operation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;“migration” or “rollback”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;operation_direction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;type of operation (upgrade or downgrade)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;code&gt;user_verion&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;user version of the migration in our case we are using the timestamp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;changed_at&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;timestamp of the migration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h1 id="alembic-tutorial"&gt;⚙️ Alembic Tutorial&lt;/h1&gt;
&lt;p&gt;You can find the complete code with a step-by-step example in the 🐍 Python notebook in this &lt;a href="https://github.com/r0mymendez/database-migration/blob/main/alembic_tutorial.ipynb"&gt;link&lt;/a&gt;. However, I will provide a brief overview of the main commands in rest sections of this post. For detailed commands and the implementation of Audit Alembic, please refer to the notebook.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/r0mymendez/database-migration"&gt;&lt;img src="https://r0mymendez.github.io//posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/github.png" width="550" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Feel free to check it out and give it a star if you find it helpful! ⭐️&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id="prerequisites"&gt;🔧 Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🐳 Docker&lt;/li&gt;
&lt;li&gt;🐙 Docker Compose&lt;/li&gt;
&lt;li&gt;🐍 Install python libraries: &lt;code&gt;!pip install alembic Audit-Alembic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id="quick-start"&gt;Quick Start&lt;/h1&gt;
&lt;h2 id="create-a-postgres-database"&gt;🔧 Create a postgres database&lt;/h2&gt;
&lt;p&gt;1️⃣ - Create docker-compose.yml file&lt;/p&gt;
&lt;pre class="yml"&gt;&lt;code&gt;    version: &amp;quot;3.7&amp;quot;
    services:
      db:
        image: postgres:13.3-alpine
        volumes:
          - ./db_data:/var/lib/postgresql/data
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - &amp;quot;5433:5432&amp;quot;

    volumes:
      db_data:&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;2️⃣ - Create postgres database Execute in the terminal: &lt;code&gt;docker-compose -f docker-compose.yml up --build&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;3️⃣ - Check if your container is running Execute in the terminal: &lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS                                       NAMES
edb1f7077e66   sqla_db   &amp;quot;docker-entrypoint.s…&amp;quot;   About an hour ago   Up About an hour   0.0.0.0:5433-&amp;gt;5432/tcp, :::5433-&amp;gt;5432/tcp   sqla_db_1&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="alembic-configuration"&gt;🔧 Alembic: Configuration&lt;/h2&gt;
&lt;p&gt;1️⃣ - Create a new Alembic environment Now, we are going to create a new Alembic project. For this reason, we need to execute the following command, which will create a group of directories and files.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;alembic init project&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;2️⃣ - Files &amp;amp; New directory&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;file_name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;📄&lt;code&gt;alembic.ini&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This file is the main configuration file for Alembic, containing the configuration settings for the Alembic environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;📁&lt;code&gt;project\verions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This directory is where the migration scripts will be stored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;📄&lt;code&gt;project\env.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This Python script contains the function for executing the migration scripts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;📄&lt;code&gt;project\script.py.mako&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This file is the template for generating new migration scripts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;📄&lt;code&gt;project\README&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This file contains a short description of the directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;3️⃣ - Add the database connection In the alembic.ini file, add the database connection string to the sqlalchemy.url variable. The connection string should be in the format:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt; sqlalchemy.url = driver://user:pass@localhost/dbname &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case I need to configure the following connection * driver: postgresql * user: postgres * password: postgres * dbname: postgres&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;sqlalchemy.url = postgresql://postgres:postgres@localhost:5433/postgres &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;4️⃣ - File name template We can uncomment the following line in the &lt;code&gt;alembic.ini&lt;/code&gt; file to change the name of the files created by Alembic, ensuring a chronological order of the files created.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="alembic-create-our-first-migration"&gt;🔧 Alembic: Create our first migration&lt;/h2&gt;
&lt;p&gt;1️⃣ - Create a migration script&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;alembic revision -m &amp;quot;create schema ecommerce&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can see the new file created in the &lt;code&gt;project/version folder&lt;/code&gt;, the file has the following name:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{current_timestamp}-{unique_identifier}_create_schema_ecommerce.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current timestamp&lt;/li&gt;
&lt;li&gt;Unique identifier, in my case is &lt;code&gt;9ec3d7e4bde9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The message that I added in the command, only change the space for a underscore.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;2️⃣ - Modify the migration file In our case, we will create the schema for the ecommerce project. However, Alembic does not have a specific method for this task. Therefore, we will use the op.execute method to execute the SQL query that will create the schema.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;# alembic does not support creating schema directly and we need to use op.execute
def upgrade() -&amp;gt; None:
    op.execute(&amp;#39;CREATE SCHEMA IF NOT EXISTS ecommerce_olist;&amp;#39;)


def downgrade() -&amp;gt; None:
    op.execute(&amp;#39;DROP SCHEMA IF EXISTS ecommerce_olist CASCADE;&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;3️⃣ - Execute the migration The following command will execute the migration and create the schema in the database. If you see the message “Done,” the migration was successful. You can also check the database to verify that the new schema was created and the Alembic version table was updated.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;alembic upgrade head&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;4️⃣ - Check the migrations Now, we can verify the current migration that was executed. This can be controlled using the Alembic command or by checking the table created earlier.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;alembic current&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.
INFO  [alembic.runtime.migration] Will assume transactional DDL.
b1bc43e2f536 (head)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;5️⃣ - History of migrations Additionally, we can check all the migrations that were executed in this project by using the following command. This will display a detailed history of the migrations, including revision IDs, parent revisions, paths to migration files, and descriptions of the changes made in each migration.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;alembic history --verbose&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="bash"&gt;&lt;code&gt;Rev: b1bc43e2f536 (head)
Parent: 784a7abb86b7
Path: /project/versions/2024_04_01_1719-b1bc43e2f536_create_table_customer.py

    create table customer
    
    Revision ID: b1bc43e2f536
    Revises: 784a7abb86b7
    Create Date: 2024-04-01 17:19:09.844065

Rev: 784a7abb86b7
Parent: &amp;lt;base&amp;gt;
Path: /project/versions/2024_04_01_1718-784a7abb86b7_create_schema_ecommerce.py

    create schema ecommerce
    
    Revision ID: 784a7abb86b7
    Revises: 
    Create Date: 2024-04-01 17:18:06.680872&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;6️⃣ - Downgrade the migration The following code allows you to revert the changes made previously.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alembic downgrade -1&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;As mentioned earlier, don’t forget to check out my &lt;a href="https://github.com/r0mymendez/database-migration"&gt;repository&lt;/a&gt; containing the step-by-step guide and the implementation of &lt;strong&gt;Audit Alembic&lt;/strong&gt;, allowing you to have a table with traceability of changes.&lt;/p&gt;
&lt;p&gt;If you find it useful, you can leave a star ⭐️.&lt;/p&gt;
&lt;p&gt;Remember, it’s always a good development practice to have a tool that &lt;strong&gt;applies changes&lt;/strong&gt; to your database, ensuring &lt;strong&gt;coherence&lt;/strong&gt;, &lt;strong&gt;avoiding manual tasks&lt;/strong&gt;, and &lt;strong&gt;enabling quick reproduction&lt;/strong&gt; of new environments.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="references"&gt;📚 References&lt;/h1&gt;
&lt;p&gt;If you want to learn…&lt;/p&gt;
&lt;p&gt;1.&lt;a href="https://alembic.sqlalchemy.org/en/latest/#"&gt;Alembic official documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href="https://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href="https://github.com/jpassaro/Audit-Alembic/tree/3f0d83cd9965933ee6779ca335fd0945aa853969"&gt;Audit-Alembic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other references:&lt;/p&gt;
&lt;p&gt;- Image preview reference: [Imagen de &lt;a href="https://www.freepik.com/free-vector/gradient-intranet-illustration_25225755.htm#fromView=search&amp;amp;page=1&amp;amp;position=44&amp;amp;uuid=0099f274-ed9f-4fc7-92a1-e9e1a2d37e58%22"&gt;Freepik&lt;/a&gt;]&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>93fd244641100fe7ab188330352ce264</distill:md5>
      <category>Python</category>
      <category>Database</category>
      <guid>https://r0mymendez.github.io/posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic</guid>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <media:content url="https://r0mymendez.github.io/posts_en/2024-04-02-simplify-database-migrations-using-python-with-alembic/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Learning AWS S3 on Localhost: Best Practices with Boto3 and LocalStack</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts_en/2024-02-12-learning-aws-s3-on-localhost-best-practices-with-boto3-and-localstack</link>
      <description>In this article, you will discover new features of **S3** and learn how to implement some of them using Boto3 in 🐍Python.</description>
      <category>Python</category>
      <category>Cloud Computing</category>
      <guid>https://r0mymendez.github.io/posts_en/2024-02-12-learning-aws-s3-on-localhost-best-practices-with-boto3-and-localstack</guid>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <media:content url="https://r0mymendez.github.io/posts_en/2024-02-12-learning-aws-s3-on-localhost-best-practices-with-boto3-and-localstack/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Transform your R Dataframes: Styles, 🎨 Colors, and 😎 Emojis </title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts_en/2024-01-14-transform-your-pandas-dataframes-in-r</link>
      <description>In the following article, we will explore a method to add colors and styles to R DataFrames.</description>
      <category>R</category>
      <category>Data</category>
      <category>DataViz</category>
      <guid>https://r0mymendez.github.io/posts_en/2024-01-14-transform-your-pandas-dataframes-in-r</guid>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <media:content url="https://r0mymendez.github.io/posts_en/2024-01-14-transform-your-pandas-dataframes-in-r/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>SQL Assistant: Text-to-SQL Application in Streamlit 🤖</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts_en/2024-01-13-sql-assistant-text-to-sql-application-in-streamlit</link>
      <description>In this article, we will explore the application of Vanna.ai, a Python library specifically designed for training a model capable of processing natural language questions and generating SQL queries as responses.</description>
      <category>Python</category>
      <category>Data</category>
      <category>DataViz</category>
      <category>AI</category>
      <guid>https://r0mymendez.github.io/posts_en/2024-01-13-sql-assistant-text-to-sql-application-in-streamlit</guid>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      <media:content url="https://r0mymendez.github.io/posts_en/2024-01-13-sql-assistant-text-to-sql-application-in-streamlit/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Transform your Pandas Dataframes: Styles, 🎨 Colors, and 😎 Emojis</title>
      <dc:creator>Romina Mendez</dc:creator>
      <link>https://r0mymendez.github.io/posts_en/2024-01-02-transform-your-pandas-dataframes</link>
      <description>In the following article, we will explore a method to add colors and styles to Pandas DataFrames.</description>
      <category>Python</category>
      <category>Data</category>
      <category>DataViz</category>
      <guid>https://r0mymendez.github.io/posts_en/2024-01-02-transform-your-pandas-dataframes</guid>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <media:content url="https://r0mymendez.github.io/posts_en/2024-01-02-transform-your-pandas-dataframes/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
  </channel>
</rss>
